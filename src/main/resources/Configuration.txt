Configurations:

1) Agregar dependencias ==>

Recordar que es un servicio que tiene que registrarse en eureka como client.

Spring Cloud Routing ==> Zuul

2) Clase principal ==>

@EnableEurekaClient
@EnableZuulProxy

3) application.properties ==>

Nombre del servicio:
spring.application.name=

Puerto:
server.port=

Ruta hacia eureka:
eureka.client.service-url.defaultZone=

Enrutamiento dinámino de microservicios:
zuul.routes.persons.service-id=persons-microservice
Se establece el path. Todos los endpoints de persons van a estar mapeados a un prefijo ==>
zuul.routes.persons.path=/api/persons/**

El persons es un nombre que puede ser cualquiera y luego del igual el nombre con el que está
registrado el microservicio en eureka.

Todos estos enrutamientos a diferentes microservicios son especificados aquí.


Spring Oauth: brindar seguridad a la ruta principal:

En primer lugar creamos un paquete y dentro del mismo la clase de seguridad.
La misma debe de llevar las anotaciones @Configuration y @EnableAuthorizationServer.
La clase debe extender de AuthorizationServerConfigurerAdapter.
Se tienen que sobreescribir los métodos de dicha clase.
Se tienen que tener los mismos métodos tokenStore() y accessTokenConverter(), configurados de igual 
forma que en el microservicio oauth. Tiene que ser el mismo código secreto o llave 
con el cual se firma el token. 

 